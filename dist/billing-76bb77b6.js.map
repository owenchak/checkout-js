{"version":3,"file":"billing-76bb77b6.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts","webpack://checkout/./packages/core/src/app/billing/Billing.tsx"],"sourcesContent":["import {\n    Address,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport {\n    AddressForm,\n    AddressFormValues,\n    AddressSelect,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isValidCustomerAddress,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    methodId?: string;\n    shouldShowOrderComments: boolean;\n    useFloatingLabel?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<\n    BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>,\n    BillingFormState\n> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses, isGuest },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            values,\n            methodId,\n            useFloatingLabel,\n        } = this.props;\n\n        const shouldRenderStaticAddress = methodId === 'amazonpay';\n        const allFormFields = getFields(values.countryCode);\n        const customFormFields = allFormFields.filter(({ custom }) => custom);\n        const hasCustomFormFields = customFormFields.length > 0;\n        const editableFormFields =\n            shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress =\n            billingAddress &&\n            isValidCustomerAddress(\n                billingAddress,\n                addresses,\n                getFields(billingAddress.countryCode),\n            );\n\n        return (\n            <Form autoComplete=\"on\">\n                {shouldRenderStaticAddress && billingAddress && (\n                    <div className=\"form-fieldset\">\n                        <StaticBillingAddress address={billingAddress} />\n                    </div>\n                )}\n\n                <Fieldset id=\"checkoutBillingAddress\" ref={this.addressFormRef}>\n                    {hasAddresses && !shouldRenderStaticAddress && (\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={isResettingAddress}>\n                                <AddressSelect\n                                    addresses={addresses}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                    selectedAddress={\n                                        hasValidCustomerAddress ? billingAddress : undefined\n                                    }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset>\n                    )}\n\n                    {!hasValidCustomerAddress && (\n                        <AddressFormSkeleton isLoading={isResettingAddress}>\n                            <AddressForm\n                                countries={countries}\n                                countriesWithAutocomplete={countriesWithAutocomplete}\n                                countryCode={values.countryCode}\n                                formFields={editableFormFields}\n                                googleMapsApiKey={googleMapsApiKey}\n                                setFieldValue={setFieldValue}\n                                shouldShowSaveAddress={!isGuest}\n                                useFloatingLabel={useFloatingLabel}\n                            />\n                        </AddressFormSkeleton>\n                    )}\n                </Fieldset>\n\n                {shouldShowOrderComments && <OrderComments />}\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={isUpdating || isResettingAddress}\n                        id=\"checkout-billing-continue\"\n                        isLoading={isUpdating || isResettingAddress}\n                        type=\"submit\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async (address) => {\n        const { updateAddress, onUnhandledError } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(\n    withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n            ...mapAddressToFormValues(\n                getFields(billingAddress && billingAddress.countryCode),\n                billingAddress,\n            ),\n            orderComment: customerMessage,\n        }),\n        isInitialValid: ({ billingAddress, getFields, language }) =>\n            !!billingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(billingAddress.countryCode),\n            }).isValidSync(billingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: BillingFormProps & WithLanguageProps) =>\n            methodId === 'amazonpay'\n                ? lazy<Partial<AddressFormValues>>((values) =>\n                      getCustomFormFieldsValidationSchema({\n                          translate: getTranslateAddressError(language),\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  )\n                : lazy<Partial<AddressFormValues>>((values) =>\n                      getAddressFormFieldsValidationSchema({\n                          language,\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  ),\n        enableReinitialize: true,\n    })(BillingForm),\n);\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import {\n    Address,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Country,\n    Customer,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { CheckoutContextProps, withCheckout } from '../checkout';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\nimport { GuestCheckoutEvents } from '../checkout/AnalyticsEvents';\nimport getBillingMethodId from './getBillingMethodId';\n\nexport interface BillingProps {\n    emitAnalyticsEvent(event: string): void;\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    billingAddress?: Address;\n    methodId?: string;\n    useFloatingLabel?: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, onReady = noop, onUnhandledError } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const { updateAddress, isInitializing, ...props } = this.props;\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <div className=\"form-legend-container\">\n                        <Legend testId=\"billing-address-heading\">\n                            <TranslatedString id=\"billing.billing_address_heading\" />\n                        </Legend>\n                    </div>\n                    <BillingForm\n                        {...props}\n                        onSubmit={this.handleSubmit}\n                        updateAddress={updateAddress}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            emitAnalyticsEvent,\n        } = this.props;\n\n        emitAnalyticsEvent(GuestCheckoutEvents.BillingEntered);\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: { isLoadingBillingCountries, isUpdatingBillingAddress, isUpdatingCheckout },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const { enableOrderComments, googleMapsApiKey, features } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        methodId: getBillingMethodId(checkout),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        useFloatingLabel: isFloatingLabelEnabled(config.checkoutSettings),\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"names":["state","isResettingAddress","addressFormRef","createRef","handleSelectAddress","address","this","props","updateAddress","onUnhandledError","setState","Error","handleUseNewAddress","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","customer","addresses","isGuest","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","methodId","useFloatingLabel","shouldRenderStaticAddress","allFormFields","countryCode","customFormFields","filter","hasCustomFormFields","length","editableFormFields","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","undefined","AddressFormSkeleton","AddressForm","formFields","shouldShowSaveAddress","OrderComments","Button","disabled","type","variant","TranslatedString","PureComponent","withLanguage","withFormik","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","isValidSync","validationSchema","getCustomFormFieldsValidationSchema","translate","enableReinitialize","BillingForm","getBillingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","addressValues","updateCheckout","navigateNextStep","emitAnalyticsEvent","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","noop","isInitializing","Legend","testId","Component","withCheckout","checkoutService","checkoutState","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","cart","checkoutSettings","enableOrderComments","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress","isFloatingLabelEnabled","Billing"],"sourceRoot":""}